## Worker Processes
# Set to auto (one worker per core) if running a dedicated Nginx instance.
# If the same physical machine runs Nginx, Django and the database, it is
# probably better to keep a single worker and leave the other cores to the
# more CPU intensive parts
#worker_processes auto;
worker_processes 1;


## Basic configurations
user nobody nogroup;
pid /tmp/nginx.pid;


## Number of connections
events {
    # Check the maximum with ulimit -n. This number can be as high as 65536
    worker_connections 1024;
    use epoll;
    multi_accept on;

    # You may want to turn on if worker_processes > 1
    accept_mutex off;
}


## HTTP requests and configuration
http {
    sendfile on;
    tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	keepalive_requests 100000;

	## Mime-types
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	## SSL Settings
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	## Logging Settings
	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	## Gzip Settings
	gzip on;
	gzip_disable "msie6";
	gzip_min_length 1024;
	gzip_buffers 8 16k;
	gzip_types application/x-javascript text/css application/javascript text/javascript text/plain text/xml application/json application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/xml font/eot font/opentype font/otf image/svg+xml image/vnd.microsoft.icon;
	gzip_vary on;
	gzip_comp_level 6;
	gzip_http_version 1.1;


    ## Gunicorn application server
    # This is the connection with the app server. We communicate with it using
    # sockets. This is safer and faster than HTTP, but only works if both
    # processes are in the same container.
    upstream django {
        server unix:/tmp/webapp.sock fail_timeout=0;
    }


    ## Nginx proxy
    server {
        listen 80 deferred;
        client_max_body_size 4G;
        server_name localhost;

        ## Static assets
        # We configure Django's static assets (/static and /media) with a
        # cached /static directory.
        root /var/www/;
        location /static {
            open_file_cache max=1000 inactive=40s;
            open_file_cache_valid 60s;
            open_file_cache_min_uses 5;
            open_file_cache_errors off;
            # expires 365d;
            alias static;
        }
        location /media {
            alias media;
        }

        ## Main entry point
        location / {
            try_files $uri @django_project;
        }

        ## Django app server
        location @django_project {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_pass http://django;
        }
    }
}
